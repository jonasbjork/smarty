<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 3005 $ -->
  <sect1 id="template.resources">
   <title>Resources</title>
   <para>
  The templates may come from a variety of sources. When you
  <link linkend="api.display"><varname>display()</varname></link> or
  <link linkend="api.fetch"><varname>fetch()</varname></link>
	   a template, or when you include a template from within another template,
	   you supply a resource type, followed by the appropriate path and template
   	name. If a resource is not explicitly given the value of <link
   	linkend="variable.default.resource.type">
    <parameter>$default_resource_type</parameter></link> is	assumed.
   </para>

   <sect2 id="templates.from.template.dir">
    <title>Templates from $template_dir</title>
    <para>
     Templates from the <link linkend="variable.template.dir">
     <parameter>$template_dir</parameter></link> do not require a template
     resource, although you can use the <literal>file:</literal> resource
     for consistancy. Just supply the path to the template you want to use
     relative to the <link linkend="variable.template.dir">
     <parameter>$template_dir</parameter></link> root directory.
    </para>
    <example>
     <title>Using templates from the $template_dir</title>
     <programlisting role="php">
<![CDATA[
<?php
$smarty->display('index.tpl');
$smarty->display('admin/menu.tpl');
$smarty->display('file:admin/menu.tpl'); // same as one above
?>
]]>
</programlisting>
<para>From within a Smarty template</para>
<programlisting>
<![CDATA[
{include file='index.tpl'}
{* below is same as above *}
{include file='file:index.tpl'}
]]>
</programlisting>
    </example>
   </sect2>
   <sect2 id="templates.from.any.dir">
    <title>Templates from any directory</title>
    <para>
     Templates outside of the <link linkend="variable.template.dir">
     <parameter>$template_dir</parameter></link>
     require the <literal>file:</literal> template resource type, followed by
     the absolute path to the template.
    </para>
    <example>
     <title>Using templates from any directory</title>
     <programlisting role="php">
<![CDATA[
<?php
$smarty->display('file:/export/templates/index.tpl');
$smarty->display('file:/path/to/my/templates/menu.tpl');
?>
]]>
     </programlisting>
     <para>
      And from within a Smarty template:
     </para>
     <programlisting>
<![CDATA[
{include file='file:/usr/local/share/templates/navigation.tpl'}
]]>
     </programlisting>
    </example>

    <sect3 id="templates.windows.filepath">
     <title>Windows Filepaths</title>
     <para>
      If you are using a Windows machine, filepaths usually include a
      drive letter (C:) at the beginning of the pathname. Be sure to use
      <literal>file:</literal> in the path to avoid namespace conflicts and
      get the desired results.
     </para>
     <example>
      <title>Using templates from windows file paths</title>
      <programlisting role="php">
<![CDATA[
<?php
$smarty->display('file:C:/export/templates/index.tpl');
$smarty->display('file:F:/path/to/my/templates/menu.tpl');
?>
]]>
     </programlisting>
     <para>
      And from within Smarty template:
     </para>
     <programlisting>
<![CDATA[
{include file='file:D:/usr/local/share/templates/navigation.tpl'}
]]>
</programlisting>
     </example>
    </sect3>
   </sect2>

   <sect2 id="templates.from.string">
    <title>Templates from strings</title>
    <para>
     Smarty can render templates from a string by using the <literal>string:</literal> or <literal>eval:</literal> resource. 
    </para>
    
    <itemizedlist>
     <listitem><para>
      The <literal>string:</literal> resource does compile the template source from string and stores the compiled template code for later reuse 
      in the <link linkend="variable.compile.dir"><parameter>$compile_dir</parameter></link> folder. Each unique template string will create create 
      a new compiled template file. Note that Smarty can not automatically detect outdated compiled code for string templates. If you have frequently 
      changing template string the <link linkend="variable.compile.dir"><parameter>$compile_dir</parameter></link> folder could be filled up quickly.
      For these cases the <literal>eval:</literal> resource could be the better choice.
     </para></listitem>
     
     <listitem><para>
      The <literal>eval:</literal> resource does evaluate (compile) the template source each time when a page is rendered. This slows down 
      the processing time to display the page as no compiled template code is saved. On the other hand if you have frequently changing 
      template source in your strings it may be the better choice compared to the <literal>string:</literal> resource as the 
      <link linkend="variable.compile.dir"><parameter>$compile_dir</parameter></link> folder will not get filled with likely outdated compiled template code.
     </para></listitem>
    </itemizedlist>
    
    <example>
     <title>Using templates from strings</title>
     <programlisting role="php">
<![CDATA[
<?php
$smarty->assign('foo','value');
$template_string = 'display {$foo} here';
$smarty->display('string:'.$template_string); // will output 'display value here'
$smarty->display('eval:'.$template_string); // same as above, but the compiled code will not be saved for later reuse
?>
]]>
</programlisting>
     <para>From within a Smarty template</para>
     <programlisting>
<![CDATA[
{* include template from Smarty variable $template_string *}
{include file="string:$template_string"}
{* below is same as above without saving compiled code *}
{include file="eval:$template_string"}

]]>
</programlisting>
    </example>
   </sect2>
   
   <sect2 id="extends.resource">
    <title>Template inheritance defined by PHP script</title>
    <para>
     The <literal>extends:</literal> resource is used to define child/parent relationships of the template inheritance functionallity from the PHP script.
     For details see section of <link linkend="advanced.features.template.inheritance">Template Interitance</link>.
    </para>
    
    
    <example>
     <title>Using template inheritance from the PHP script</title>
     <programlisting role="php">
<![CDATA[
<?php
$smarty->display('extends:parent.tpl|child.tpl|grandchild.tpl'); 
?>
]]>
     </programlisting>
    </example>
   </sect2>
   
   <sect2 id="templates.from.elsewhere">
    <title>Templates from other sources</title>
    <para>
     You can retrieve templates using whatever possible source you can
     access with PHP: databases, sockets, LDAP, and so on. You do this
     by writing resource plugin functions and registering them with
     Smarty.
    </para>

    <para>
     See <link linkend="plugins.resources">resource plugins</link>
     section for more information on the functions you are supposed
     to provide.
    </para>

    <note>
     <para>
      Note that you cannot override the built-in
      <literal>file:</literal> resource, but you can provide a resource
      that fetches templates from the file system in some other way by
      registering under another resource name.
     </para>
    </note>
    <example>
     <title>Using custom resources</title>
     <programlisting role="php">
<![CDATA[
<?php
// put these function somewhere in your application
function db_get_template ($tpl_name, &$tpl_source, $smarty_obj)
{
    // do database call here to fetch your template,
    // populating $tpl_source with actual template contents
    $tpl_source = "This is the template text";
    // return true on success, false to generate failure notification
    return true;
}

function db_get_timestamp($tpl_name, &$tpl_timestamp, $smarty_obj)
{
    // do database call here to populate $tpl_timestamp
    // with unix epoch time value of last template modification.
    // This is used to determine if recompile is necessary.
    $tpl_timestamp = time(); // this example will always recompile!
    // return true on success, false to generate failure notification
    return true;
}

function db_get_secure($tpl_name, $smarty_obj)
{
    // assume all templates are secure
    return true;
}

function db_get_trusted($tpl_name, $smarty_obj)
{
    // not used for templates
}

// register the resource name "db"
$smarty->register_resource("db", array("db_get_template",
                                       "db_get_timestamp",
                                       "db_get_secure",
                                       "db_get_trusted"));

// using resource from php script
$smarty->display("db:index.tpl");
?>
]]>
     </programlisting>
     <para>
      And from within Smarty template:
     </para>
     <programlisting>
<![CDATA[
{include file='db:/extras/navigation.tpl'}
]]>
     </programlisting>
    </example>
   </sect2>

   <sect2 id="default.template.handler.function">
    <title>Default template handler function</title>
    <para>
     You can specify a function that is used to retrieve template
     contents in the event the template cannot be retrieved from its
     resource. One use of this is to create templates that do not exist
     on-the-fly.
    </para>
    <example>
     <title>Using the default template handler function</title>
     <programlisting role="php">
<![CDATA[
<?php
// put this function somewhere in your application

function make_template ($resource_type, $resource_name, &$template_source, &$template_timestamp,
$smarty_obj)
{
	if( $resource_type == 'file' ) {
		if ( ! is_readable ( $resource_name )) {
			// create the template file, return contents.
			$template_source = "This is a new template.";
            require_once SMARTY_CORE_DIR . 'core.write_file.php';
            smarty_core_write_file( array( 'filename'=>$smarty_obj->template_dir . DIRECTORY_SEPARATOR . $resource_name, 'contents'=>$template_source ), $smarty_obj ); 
			return true;
		}
    } else {
		// not a file
		return false;
    }
}

// set the default handler
$smarty->default_template_handler_func = 'make_template';
?>
]]>
     </programlisting>
    </example>
   </sect2>
  </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

