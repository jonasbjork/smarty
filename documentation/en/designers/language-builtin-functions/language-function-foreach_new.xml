<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="language.function.foreach_new">
 <title>{foreach},{foreachelse} - new style</title> 
 <para>
  With Smarty3 an alternative new PHP like syntax was instroduced for the <varname>{foreach}</varname> tags.
  See <link linkend="language.function.foreach"><varname>{foreach}</varname></link> for the 
  Smarty2 backward compatible syntax.
 </para>
 <para>
  <varname>{foreach $arrayvar as $itemvar}</varname> 
 </para>
 <para>
  <varname>{foreach $arrayvar as $keyvar=>$itemvar}</varname> 
 </para>
 <para>
  The new syntax does not accept any named attributes.
 </para>
 
 
   <itemizedlist>
   <listitem><para>
   <varname>{foreach}</varname> loops can be nested, and the nested
   <varname>{foreach}</varname> names must be unique from each other.
   </para></listitem>

   <listitem><para>
   The <parameter>array</parameter> variable, usually an array of values,
   determines the number of times <varname>{foreach}</varname> will loop.
   </para></listitem>

   <listitem><para>
   <varname>{foreachelse}</varname> is executed when there are no
   values in the <parameter>array</parameter> variable.
   </para></listitem>

    <listitem><para>
     Smarty3 does introduce a new way to access <varname>{foreach}</varname> properties.
     The properties are attached to the <parameter>item</parameter> variable. The syntax is
     <parameter>{$item@property}</parameter> (see examples below). 
    </para></listitem>    
    
  <listitem><para>
    <varname>{foreach}</varname> properties are
    <link linkend="foreach_new.property.index"><parameter>index</parameter></link>,
    <link linkend="foreach_new.property.iteration"><parameter>iteration</parameter></link>,
    <link linkend="foreach_new.property.first"><parameter>first</parameter></link>,
    <link linkend="foreach_new.property.last"><parameter>last</parameter></link>,
    <link linkend="foreach_new.property.show"><parameter>show</parameter></link>,
    <link linkend="foreach_new.property.total"><parameter>total</parameter></link>.
  </para></listitem>
        
    <listitem><para>
     Instead of specifying the <parameter>key</parameter> variable you can access the current key of the
     loop item by <parameter>{$item@key}</parameter> (see examples below).
    </para></listitem>    
    
   </itemizedlist>
 
 <para><emphasis role="bold">Option Flags:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="2">
   <colspec colname="param" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Name</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>nocache</entry>
     <entry>Disables caching of the <varname>{foreach}</varname> loop</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 
 <example>
  <title>A simple <varname>{foreach}</varname> loop</title>
  <programlisting role="php">
<![CDATA[
<?php
$arr = array(1000, 1001, 1002);
$smarty->assign('myArray', $arr);
?>
]]>
  </programlisting>
   <para>Template to output <parameter>$myArray</parameter> in an un-ordered list</para>
  <programlisting>
<![CDATA[
<ul>
{foreach $myArray as $foo}
    <li>{$foo}</li>
{/foreach}
</ul>
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<ul>
    <li>1000</li>
    <li>1001</li>
    <li>1002</li>
</ul>
]]>
  </screen>
 </example>

<example>
  <title>Demonstrates the an additional <parameter>key</parameter> variable</title>
  <programlisting role="php">
<![CDATA[
<?php
$arr = array(9 => 'Tennis', 3 => 'Swimming', 8 => 'Coding');
$smarty->assign('myArray', $arr);
?>
]]>
  </programlisting>
   <para>Template to output <parameter>$myArray</parameter> as key/val pair,
   like PHP's <ulink url="&url.php-manual;foreach"><varname>foreach</varname></ulink>.</para>
  <programlisting>
<![CDATA[
<ul>
{foreach $myArray as $k => $v}
   <li>{$k}: {$v}</li>
{/foreach}
</ul>
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<ul>
    <li>9: Tennis</li>
    <li>3: Swimming</li>
    <li>8: Coding</li>
</ul>
]]>
  </screen>
 </example>



 <example>
  <title>{foreach} with nested <parameter>item</parameter> and <parameter>key</parameter></title>
  <para>Assign an array to Smarty, the key contains the key for each looped value.</para>
  <programlisting role="php">
<![CDATA[
<?php
 $smarty->assign('contacts', array(
                             array('phone' => '1',
                                   'fax' => '2',
                                   'cell' => '3'),
                             array('phone' => '555-4444',
                                   'fax' => '555-3333',
                                   'cell' => '760-1234')
                             ));
?>
]]>
  </programlisting>
  <para>The template to output <parameter>$contact</parameter>.</para>
  <programlisting>
<![CDATA[
{foreach $contacts as $contact}
  <hr />
  {foreach from=$contact as $key => $item }
    {$key}: {$item}<br />
  {/foreach}
{/foreach}
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<hr />
  phone: 1<br />
  fax: 2<br />
  cell: 3<br />
<hr />
  phone: 555-4444<br />
  fax: 555-3333<br />
  cell: 760-1234<br />
]]>
  </screen>
 </example>

 <example>
  <title>Database example with {foreachelse}</title>
  <para>A database (eg PEAR or ADODB) example of a search script, the query results assigned to Smarty</para>
<programlisting role="php">
<![CDATA[
<?php
  $search_condition = "where name like '$foo%' ";
  $sql = 'select contact_id, name, nick from contacts '.$search_condition.' order by name';
  $smarty->assign('results', $db->getAssoc($sql) );
?>
]]>
  </programlisting>
  <para>The template which display <quote>None found</quote>
  if no results with <varname>{foreachelse}</varname>.</para>
  <programlisting>
<![CDATA[
{foreach $results as $cid => $con}
    <a href="contact.php?contact_id={$cid}">{$con.name} - {$con.nick}</a><br />
{foreachelse}
    No items were found in the search
{/foreach}
]]>
  </programlisting>
 </example>


 <sect2 id="foreach_new.property.index">
  <title>index</title>
  <para>
   <parameter>index</parameter> contains the current array index, starting with zero.
  </para>
  <example>
  <title><parameter>index</parameter> example</title>

   <programlisting>
<![CDATA[
{* The header block is output every five rows *}
<table>
{foreach $items as $i}
  {if $i@index % 5 == 0}
     <tr><th>Title</th></tr>
  {/if}
  <tr><td>{$i.label}</td></tr>
{/foreach}
</table>
]]>
  </programlisting>
  </example>
  </sect2>

 <sect2 id="foreach_new.property.iteration">
  <title>iteration</title>
  <para>
   <parameter>iteration</parameter> contains the current loop iteration and always
   starts at one, unlike <link linkend="foreach_new.property.index"><parameter>index</parameter></link>.
   It is incremented by one on each iteration.
  </para>
 <example>
  <title><parameter>iteration</parameter> and <parameter>index</parameter> example</title>
  <programlisting>
<![CDATA[
{* this will output 0|1, 1|2, 2|3, ... etc *}
{foreach $myArray as $i}
{$i@index}|{$i@iteration},
{/foreach}
]]>
</programlisting> 
 </example>
 </sect2>

 <sect2 id="foreach_new.property.first">
  <title>first</title>
  <para>
   <parameter>first</parameter> is &true; if the current <varname>{foreach}</varname>
   iteration is the initial one.
  </para>
  <example>
  <title><parameter>first</parameter> property example</title>
   <programlisting>
<![CDATA[
{* show LATEST on the first item, otherwise the id *}
<table>
{foreach $items as $i}
<tr>
  <td>{if $i@first}LATEST{else}{$i@key}{/if}</td>
  <td>{$i.label}</td>
</tr>
{/foreach}
</table>
]]>
  </programlisting>
  </example>
 </sect2>

 <sect2 id="foreach_new.property.last">
  <title>last</title>
  <para>
   <parameter>last</parameter> is set to &true; if the current
   <varname>{foreach}</varname> iteration is the final one.
  </para>
   <example>
  <title><parameter>last</parameter> property example</title>
    <programlisting>
<![CDATA[
{* Add horizontal rule at end of list *}
{foreach $items as $part_id => $prod}
  <a href="#{$part_id}">{$prod}</a>{if $prod@last}<hr>{else},{/if}
{foreachelse}
  ... content ...
{/foreach}
]]>
  </programlisting>
   </example>
 </sect2>

 <sect2 id="foreach_new.property.show">
  <title>show</title>
  <para>
   The show <parameter>show</parameter> property can be used after the excution of the
   <varname>{foreach}</varname> to detect if data has been display or not.
   <parameter>show</parameter> is a boolean value.
  </para>
  <example>
   <title><parameter>show</parameter> property example</title>
   <programlisting>
<![CDATA[
<ul>
{foreach $myArray as $foo}
    <li>{$foo}</li>
{/foreach}
</ul>
{if $foo@show} do something if the array did contain data {/if}
]]>
</programlisting>
</example>
 </sect2>

 <sect2 id="foreach_new.property.total">
  <title>total</title>
  <para>
   <parameter>total</parameter> contains the number of iterations that this
   <varname>{foreach}</varname>  will loop.
   This can be used inside or after the <varname>{foreach}</varname>.
  </para>
     <example>
  <title><parameter>total</parameter> property example</title>
<programlisting>
<![CDATA[
{* show rows returned at end *}
{foreach $items as $part_id => $prod}
{$prod.name}<hr/>
{if $prod@last}
  <div id="total">{$prod@total} items</div>
{/if}
{foreachelse}
 ... something else ...
{/foreach}
]]>
</programlisting>
</example>
 </sect2>
 
  <para>
   See also <link linkend="language.function.foreach"><varname>{foreach}</varname></link>.
  </para>
</sect1>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
