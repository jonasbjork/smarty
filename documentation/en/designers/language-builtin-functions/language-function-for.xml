<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="language.function.for">
 <title>{for}</title> 
 <para>
  The <varname>{for}{forelse}</varname> tag is used to create simple loops. The following different formarts are supported:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <varname>{for $var=1 to $end}</varname> simple loop with step size of 1 or -1 when $end is less then
    the starting value.
   </para>
  </listitem>
  <listitem>
   <para>
    <varname>{for $var=1 to $end step 2}</varname> loop with individual step size.
   </para>
  </listitem>
  <listitem>
   <para>
    <varname>{for $foo=1; $foo < $bar; $foo++}</varname> PHP style for loop
   </para>
  </listitem>
  <itemizedlist>
 
 
 <para><emphasis role="bold">Option Flags:</emphasis></para>
 <informaltable frame="all">
  <tgroup cols="2">
   <colspec colname="param" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Name</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>nocache</entry>
     <entry>Disables caching of the <varname>{for}</varname> loop</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
 
 <example>
  <title>A simple <varname>{foreach}</varname> loop</title>
  <programlisting role="php">
<![CDATA[
<?php
$arr = array(1000, 1001, 1002);
$smarty->assign('myArray', $arr);
?>
]]>
  </programlisting>
   <para>Template to output <parameter>$myArray</parameter> in an un-ordered list</para>
  <programlisting>
<![CDATA[
<ul>
{foreach $myArray as $foo}
    <li>{$foo}</li>
{/foreach}
</ul>
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<ul>
    <li>1000</li>
    <li>1001</li>
    <li>1002</li>
</ul>
]]>
  </screen>
 </example>

<example>
  <title>Demonstrates the an additional <parameter>key</parameter> variable</title>
  <programlisting role="php">
<![CDATA[
<?php
$arr = array(9 => 'Tennis', 3 => 'Swimming', 8 => 'Coding');
$smarty->assign('myArray', $arr);
?>
]]>
  </programlisting>
   <para>Template to output <parameter>$myArray</parameter> as key/val pair,
   like PHP's <ulink url="&url.php-manual;foreach"><varname>foreach</varname></ulink>.</para>
  <programlisting>
<![CDATA[
<ul>
{foreach $myArray as $k => $v}
   <li>{$k}: {$v}</li>
{/foreach}
</ul>
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<ul>
    <li>9: Tennis</li>
    <li>3: Swimming</li>
    <li>8: Coding</li>
</ul>
]]>
  </screen>
 </example>



 <example>
  <title>{foreach} with nested <parameter>item</parameter> and <parameter>key</parameter></title>
  <para>Assign an array to Smarty, the key contains the key for each looped value.</para>
  <programlisting role="php">
<![CDATA[
<?php
 $smarty->assign('contacts', array(
                             array('phone' => '1',
                                   'fax' => '2',
                                   'cell' => '3'),
                             array('phone' => '555-4444',
                                   'fax' => '555-3333',
                                   'cell' => '760-1234')
                             ));
?>
]]>
  </programlisting>
  <para>The template to output <parameter>$contact</parameter>.</para>
  <programlisting>
<![CDATA[
{foreach $contacts as $contact}
  <hr />
  {foreach from=$contact as $key => $item }
    {$key}: {$item}<br />
  {/foreach}
{/foreach}
]]>
  </programlisting>
  <para>
   The above example will output:
  </para>
  <screen>
<![CDATA[
<hr />
  phone: 1<br />
  fax: 2<br />
  cell: 3<br />
<hr />
  phone: 555-4444<br />
  fax: 555-3333<br />
  cell: 760-1234<br />
]]>
  </screen>
 </example>

 <example>
  <title>Database example with {foreachelse}</title>
  <para>A database (eg PEAR or ADODB) example of a search script, the query results assigned to Smarty</para>
<programlisting role="php">
<![CDATA[
<?php
  $search_condition = "where name like '$foo%' ";
  $sql = 'select contact_id, name, nick from contacts '.$search_condition.' order by name';
  $smarty->assign('results', $db->getAssoc($sql) );
?>
]]>
  </programlisting>
  <para>The template which display <quote>None found</quote>
  if no results with <varname>{foreachelse}</varname>.</para>
  <programlisting>
<![CDATA[
{foreach $results as $cid => $con}
    <a href="contact.php?contact_id={$cid}">{$con.name} - {$con.nick}</a><br />
{foreachelse}
    No items were found in the search
{/foreach}
]]>
  </programlisting>
 </example>


 
  <para>
   See also <link linkend="language.function.foreach"><varname>{foreach}</varname></link>,
   <link linkend="language.function.foreach_new"><varname>{foreach} - new stylw</varname></link> and
   <link linkend="language.function.section"><varname>{section}</varname></link>
  </para>
</sect1>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
